/*
    This file implements the unit test for the mmap_file_t class
  
    Copyright 2012-2017 Mats Liljegren.

    This file is part of Sisdel.

    Sisdel is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 3
    as published by the Free Software Foundation.

    Sisdel is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Sisdel.  If not, see <http://www.gnu.org/licenses/>.

 */

#include <gtest/gtest.h>
#include "mmap_file.hh"

namespace {
	// Test find_add_hashed(), also uses operator[] for verification.
	// Uses variant 0 of the strings generated by the setup.
	TEST(test_mmap_file, get_set_position) {
		environment_t m_env;
		mmap_file_t file(m_env, m_env.sbucket().find_add("check_mmap_file.data"));
		const unsigned nr_iterations = 5;
		unsigned nr_skips[nr_iterations] = { 13, 5, 23, 17, 9 };
		std::unique_ptr<position_t> position[nr_iterations];

		for (unsigned iteration = 0;
		     iteration < nr_iterations;
		     iteration++) {
			position[iteration].reset(
				new position_t(file.get_position()));
			for (unsigned skip = 0;
			     skip < nr_skips[iteration];
			     skip++)
				file.skip();
		}

		std::default_random_engine r;
		std::uniform_int_distribution<unsigned> u(0, nr_iterations - 2);
		
		for (unsigned loop = 0;
		     loop < 100;
		     loop++) {
			unsigned iteration = u(r);
			file.set_position(*position[iteration]);
			for (unsigned skip = 0;
			     skip < nr_skips[iteration];
			     skip++)
				file.skip();
			EXPECT_EQ(*position[iteration+1], file.get_position());
		}
	}

	TEST(test_mmap_file, file_not_found) {
		environment_t m_env;
		EXPECT_THROW(mmap_file_t file(m_env, m_env.sbucket().find_add("non-existing-file")), std::system_error);
	}

}

int main(int argc, char *argv[]) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}
