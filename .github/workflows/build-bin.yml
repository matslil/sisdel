---

on:
  push:
  pull_request:
env:
  CONAN_USER_HOME: "${{ github.workspace }}/conan"
jobs:
  setup-conan-libs:
    name: setup Conan libraries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-20.04
        - windows-latest
        - macos-latest
    steps:
    - id: checkout
      name: checkout source
      uses: actions/checkout@v2
      with:
        path: 'src'
    - id: conan-cache
      name: recall/setup Conan cache
      uses: actions/cache@v2
      with:
        path: ${{ env.CONAN_USER_HOME }}/**
        key: "conan-cache-5-${{ runner.os }}-${{ hashFiles('src/conanfile.txt', 'src/profile-${{ runner.os }}.txt') }}"
    - id: conan
      name: install Conan
      if: ${{ steps.conan-cache.outputs.cache-hit != 'true' }}
      uses: turtlebrowser/get-conan@main
    - id: setup-msbuild
      name: setup Visual Studio paths
      if: ${{ matrix.os == 'windows-latest' && steps.conan-cache.outputs.cache-hit != 'true' }}
      uses: microsoft/setup-msbuild@v1.0.2
    - id: conan-build
      name: build dependencies with Conan
      if: ${{ steps.conan-cache.outputs.cache-hit != 'true' }}
      run: conan install --profile "src/profile-${{ runner.os }}.txt" --build missing "src/conanfile.txt" --install-folder "${{ env.CONAN_USER_HOME }}"
    - run: ls -AR
    - id: conan-cleanup
      name: cleanup unneeded build artifacts
      if: ${{ steps.conan-cache.outputs.cache-hit != 'true' }}
      run: conan remove --force --src --system-reqs '*'
    - run: ls -AR

  build-binaries:
    needs: setup-conan-libs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
    steps:
    - id: checkout
      name: checkout source
      uses: actions/checkout@v2
      with:
        path: 'src'
    - id: conan-cache
      name: recall cached dependencies
      uses: actions/cache@v2
      with:
        path: ${{ env.CONAN_USER_HOME }}/**
        key: "conan-cache-5-${{ runner.os }}-${{ hashFiles('src/conanfile.txt', 'src/profile-${{ runner.os }}.txt') }}"
    - id: assert-conan-cache
      name: assert Conan cache was recalled
      uses: nick-invision/assert-action@v1.1.0
      with:
        expected: 'true'
        actual: ${{ steps.conan-cache.outputs.cache-hit }}
    - id: mkdir-build
      name: create build directory
      run: cmake -E make_directory build
    - id: cmake
      name: setup CMake and Ninja
      uses: lukka/get-cmake@latest
    - id: ls-AR-1
      shell: bash
      run: ls -AR
    - id: setup-msbuild
      name: setup Visual Studio paths
      if: ${{ matrix.os == 'windows-latest' }}
      uses: microsoft/setup-msbuild@v1.0.2
    - id: setup-cc-cxx
      name: setup CC and CXX environment variables
      if: ${{ matrix.os == 'ubuntu-latest' }}
      env:
        CC: clang-11
        CXX: clang++-11
      run: cmake -G "Ninja Multi-Config" -DBUILD_DOC:BOOL=NO ../src
      working-directory: 'build'
    - id: config
      name: configure build
      if: ${{ matrix.os != 'ubuntu-latest' }}
      run: cmake -G "Ninja Multi-Config" -DBUILD_DOC:BOOL=NO ../src
      working-directory: 'build'
    - id: build-release
      name: build release
      run: cmake --build . --config Release
      working-directory: 'build'
    - id: build-debug
      name: build debug
      run: cmake --build . --config Debug
      working-directory: 'build'
    - id: build-packages
      name: build packages
      run: |
          cmake --build . --config Release --target package
          cmake --build . --config Debug   --target package
      working-directory: 'build'
    - id: upload-artifacts
      name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: build/sisdel-*

  build-docs:
    needs: setup-conan-libs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
    steps:
    - id: checkout
      name: checkout source
      uses: actions/checkout@v2
      with:
        path: 'src'
    - id: cmake
      name: setup CMake and Ninja
      uses: lukka/get-cmake@latest
    - id: python-setup
      name: ensure Python is new enough
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - id: python-modules
      name: install Python modules
      run: python -m pip install sphinx breathe sphinx-rtd-theme exhale
    - id: install-doxygen-ubuntu
      name: ubuntu install doxygen
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt-get install -y doxygen graphviz
    - id: install-doxygen-windows
      name: windows install doxygen
      if: ${{ matrix.os == 'windows-latest' }}
      run: choco install doxygen.install graphviz
    - id: install-doxygen-macos
      name: macos install doxygen
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew install doxygen graphviz
    - id: mkdir-build
      name: create build directory
      run: cmake -E make_directory build
    - id: configure-cmake
      name: run CMake configure
      run: cmake -G "Ninja" -DBUILD_LIB:BOOL=NO -DBUILD_PARSER:BOOL=NO ../src
      working-directory: 'build'
    - id: build-doc
      name: build documentation
      run: cmake --build . --target doc
      working-directory: 'build'
    - id: build-packages
      name: build documentation packages
      run: cmake --build . --component doc --target package
      working-directory: 'build'
    - id: upload-artifacts
      name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: build/sisdel-*

