---

on:
  push:
  pull_request:
env:
  CONAN_USER_HOME: ${{ github.workspace }}
jobs:
  setup:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-20.04
        - windows-latest
        - macos-latest
    steps:
    - id: cmake
      name: install CMake
      uses: lukka/get-cmake@latest
    - id: checkout
      name: check out repository
      uses: actions/checkout@v2
      with:
        path: 'src'
    - id: conan-cache
      name: use cached libraries built by Conan
      uses: actions/cache@v2
      with:
        path: ${{ env.CONAN_USER_HOME }}
        key: "conan-cache-${{ runner.os }}-${{ hashFiles('conanfile.txt;profile-${{ runner.os }}.txt') }}"
    - id: conan
      name: install Conan
      if: steps.conan-cache.outputs.cache-hit != 'true'
      uses: turtlebrowser/get-conan@main
    - id: conan-libs
      name: install libraries with Conan
      if: steps.conan-cache.outputs.cache-hit != 'true'
      run: conan install --profile profile-${{ runner.os }}.txt --build missing conanfile.txt
      working-directory: 'src'

  build:
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-20.04
        - windows-latest
        - macos-latest
    steps:
    - id: mkdir
      name: Create build directory
      run: cmake -E make_directory build
    - id: ls
      run: ls -AR
    - id: config
      name: Configure CMake
      run: cmake -G "Ninja Multi-Config" ../src
      working-directory: build
    - id: build-release
      name: Build release library
      run: cmake --build . --config Release
      working-directory: build
    - id: build-debug
      name: Build debug library
      run: cmake --build . --config Debug
      working-directory: build

  analyze:
    needs: setup
    name: analyze
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # Command-line programs to run using the OS shell.
    # https://git.io/JvXDl

    #  If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
