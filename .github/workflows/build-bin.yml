---

on:
  push:
  pull_request:
env:
  CONAN_USER_HOME: "${{ github.workspace }}/conan"
jobs:
  setup-conan-libs:
    name: setup Conan libraries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-20.04
        - windows-latest
        - macos-latest
    steps:
    - id: checkout
      name: checkout source
      uses: actions/checkout@v2
      with:
        path: 'src'
    - id: conan-cache
      name: recall/setup Conan cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.CONAN_USER_HOME }}/*.cmake
          ${{ env.CONAN_USER_HOME }}/**/package/**
          ${{ env.CONAN_USER_HOME }}/.conan/[0-9]*/**
        key: "conan-cache-3-${{ runner.os }}-${{ hashFiles('src/conanfile.txt', 'src/profile-${{ runner.os }}.txt') }}"
    - id: conan
      name: install Conan
      if: ${{ steps.conan-cache.outputs.cache-hit != 'true' }}
      uses: turtlebrowser/get-conan@main
    - id: setup-msbuild
      name: setup Visual Studio paths
      if: ${{ matrix.os == 'Windows' && steps.conan-cache.outputs.cache-hit != 'true' }}
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
    - id: conan-build
      name: build dependencies with Conan
      if: ${{ steps.conan-cache.outputs.cache-hit != 'true' }}
      run: conan install --profile "src/profile-${{ runner.os }}.txt" --build missing "src/conanfile.txt" --install-folder conan

  build:
    needs: setup-conan-libs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-20.04
        - windows-latest
        - macos-latest
    steps:
    - id: checkout
      name: checkout source
      uses: actions/checkout@v2
      with:
        path: 'src'
    - id: conan-cache
      name: recall cached dependencies
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.CONAN_USER_HOME }}/*.cmake
          ${{ env.CONAN_USER_HOME }}/**/package/**
          ${{ env.CONAN_USER_HOME }}/.conan/[0-9]*/**
        key: "conan-cache-3-${{ runner.os }}-${{ hashFiles('src/conanfile.txt', 'src/profile-${{ runner.os }}.txt') }}"
    - id: assert-conan-cache
      name: assert Conan cache was recalled
      uses: nick-invision/assert-action@v1.1.0
      with:
        expected: 'true'
        actual: ${{ steps.conan-cache.outputs.cache-hit }}
    - id: python-setup
      name: ensure Python is new enough
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - id: python-modules
      name: install Python modules
      run: python -m pip install sphinx breathe sphinx-rtd-theme exhale
    - id: mkdir-build
      name: create build directory
      run: cmake -E make_directory build
    - id: cmake
      name: setup CMake and Ninja
      uses: lukka/get-cmake@latest
    - id: ls-AR-1
      shell: bash
      run: ls -AR
    - id: setup-msbuild
      name: setup Visual Studio paths
      if: ${{ matrix.os == 'Windows' }}
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
    - id: setup-cc-cxx
      name: setup CC and CXX environment variables
      if: ${{ matrix.os == 'Linux' }}
      env:
        CC: clang-11
        CXX: clang++-11
    - id: config
      name: configure build
      run: cmake -G "Ninja Multi-Config" -DCMAKE_TOOLCHAIN_FILE="${{ env.CONAN_USER_HOME }}/conan_paths.cmake" ../src
      working-directory: 'build'
    - id: build-release
      name: build release
      run: cmake --build . --config Release
      working-directory: 'build'
    - id: build-debug
      name: build debug
      run: cmake --build . --config Debug
      working-directory: 'build'

    - id: build-doc
      name: build documentation
      run: cmake --build . --target doc
      working-directory: 'build'
    - id: unit-test
      name: run tests
      run: ctest
      working-directory: 'build'
    - id: package-release
      name: package release
      run: cmake --build . --target package --config Release
      working-directory: 'build'
    - id: package-debug
      name: package debug
      run: cmake --build . --target package --config Debug
      working-directory: 'build'
    - id: ls-AR-2
      run: ls -AR

